// Code generated by protoc-gen-go. DO NOT EDIT.
// source: key.proto

package keygen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Key struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_2accf5df6005b7d4, []int{0}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Key)(nil), "keygen.Key")
}

func init() {
	proto.RegisterFile("key.proto", fileDescriptor_2accf5df6005b7d4)
}

var fileDescriptor_2accf5df6005b7d4 = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x4e, 0xad, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x32, 0xd3, 0x53, 0xf3, 0xa4, 0xa4, 0xd3, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xa2, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x50,
	0x45, 0x4a, 0xa2, 0x5c, 0xcc, 0xde, 0xa9, 0x95, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x40, 0x96, 0x91, 0x0d, 0xd8, 0x20, 0xa0, 0xee, 0xe0, 0xa2, 0x32,
	0x21, 0x7d, 0x2e, 0x36, 0xf7, 0xd4, 0x12, 0x90, 0x32, 0x31, 0x3d, 0x88, 0x59, 0x7a, 0x30, 0xb3,
	0xf4, 0x5c, 0x41, 0x66, 0x49, 0x71, 0xeb, 0x41, 0x54, 0xeb, 0x01, 0x15, 0x29, 0x31, 0x24, 0xb1,
	0x81, 0xa5, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xd4, 0x58, 0xc9, 0x8d, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KeygenSrvClient is the client API for KeygenSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeygenSrvClient interface {
	GetKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Key, error)
}

type keygenSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewKeygenSrvClient(cc grpc.ClientConnInterface) KeygenSrvClient {
	return &keygenSrvClient{cc}
}

func (c *keygenSrvClient) GetKey(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/keygen.keygenSrv/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeygenSrvServer is the server API for KeygenSrv service.
type KeygenSrvServer interface {
	GetKey(context.Context, *empty.Empty) (*Key, error)
}

// UnimplementedKeygenSrvServer can be embedded to have forward compatible implementations.
type UnimplementedKeygenSrvServer struct {
}

func (*UnimplementedKeygenSrvServer) GetKey(ctx context.Context, req *empty.Empty) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}

func RegisterKeygenSrvServer(s *grpc.Server, srv KeygenSrvServer) {
	s.RegisterService(&_KeygenSrv_serviceDesc, srv)
}

func _KeygenSrv_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeygenSrvServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keygen.keygenSrv/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeygenSrvServer).GetKey(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeygenSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keygen.keygenSrv",
	HandlerType: (*KeygenSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKey",
			Handler:    _KeygenSrv_GetKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key.proto",
}
